---
description: Subscribe to take part in the Hillcroft charity lottery. Support the club and earn cash prizes.
---

{% extends "_includes/default.njk" %}

{% block title %}Hillcroft Lacrosse - London{% endblock %}
{% set hide_navbar=true %}

{% block head %}<script src="https://js.stripe.com/v3/"></script>{% endblock %}
{% block content %}

<div class="w-full flex flex-wrap min-h-screen min-w-screen bg-gray-100">

  <!-- Payment Section --> 
  <div class="w-full sm:w-2/3 lg:w-1/2 3xl:w-1/3 flex flex-col m-auto">
    <div class="flex flex-col justify-center md:justify-start mx-auto pt-8 md:pt-0 px-8 md:px-16 lg:px-24 w-full">
      <div class="flex items-center justify-center w-full">
        <div class="flex flex-col shadow-xl w-full  2xl:w-2/3 max-w-screen-md">
          <div class="py-6 px-14 bg-yellow rounded-tl-2xl rounded-tr-2xl text-center space-y-2">
            <img src="/images/hillcroft_lacrosse_club_logo.png" class="object-scale-down mx-auto"/>
          </div>
          <form class="flex flex-col py-6 px-8 space-y-5 bg-white" x-data="paymentForm()" @submit.prevent="createStripeCustomer" x-init="initialiseStripeForm()">
            <div class="text-center">
              <h1 class="text-gray text-xs">Hillcroft Lacrosse Club</h1>                  
              <h2 class="text-gray font-bold text-xl uppercase">Charity Lottery</h2>
              </hr>
            </div>
            <input placeholder="Enter your name" @input="checkCustomerInput" type="text" name="name" x-model="paymentData.name" class="px-2 py-2 border-2 rounded-md border-gray-200 focus:outline-none focus:ring-1 focus:ring-yellow focus:border-transparent" />
            <input placeholder="Enter your email address" @input="checkCustomerInput" type="email" name="email" x-model="paymentData.email" class="px-2 py-2 border-2 rounded-md border-gray-200 focus:outline-none focus:ring-1 focus:ring-yellow focus:border-transparent" />
            <div :class="{'hidden': hideCustomerError === true }" id="customer-element-errors" role="alert" class="flex flex-col align-text-top text-gray-500 text-xs m-0">Please give a full name and valid email</div>
            <!-- Payment info -->
            
            <p class="uppercase text-gray text-xs"><strong>Payment information</strong></p>
            <div id="stripeLoader" class="loader ease-linear rounded-full border-2 border-t-2 border-gray-200 h-4 w-4 m-auto"></div>
              <div id="paymentContent" class="flex flex-col transition delay-1000 ease-in duration-100 transition-opacity hidden">
                
                <div id="card-element" class="flex flex-col mt-1 mb-1 p-2 px-2 py-2 border-2 rounded-md border-gray-200 focus:outline-none focus:ring-1 focus:ring-yellow focus:border-transparent">
                  <!-- Elements will create input elements here -->
                </div>
                <div id="card-element-errors" role="alert" class="flex flex-col align-text-top text-gray-500 text-xs m-0 'hidden': hideCustomerError === true"></div>

                <!-- We'll put the error messages in this element -->
              </div>
              
              <hr class="m-4">
              <button :disabled="loading" x-text="buttonLabel" class="disabled:opacity-50 w-full py-3 bg-yellow text-black rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-pink-500 focus:border-transparent shadow-lg uppercase"><strong>Sign up</strong></button>
            </div>
          </form>
        </div>
      </div>
    </div>

        

  <!-- Image Section -->
  <div class="w-1/2 3xl:w-2/3 shadow-2xl hidden lg:block">
      <img class="object-cover w-full h-screen hidden lg:block" src="/images/hillcroft_lacrosse_club_mens_london.jpg">
  </div>
</div>


{% endblock %}

{% block scripts %}
<script>
  function paymentForm() {

    const stripe = Stripe('{{globals.STRIPE_PUBLISHED_KEY}}', {locale: "en-GB"});
      
      return {
        priceId: '{{ globals.STRIPE_PRICE_ID }}',
        paymentData: {
          name: '',
          email: '',
          customer: {},
        },
        loading: false,
        buttonLabel: 'Sign Up',
        validCardData: false,
        hideCustomerError: true,
        hidePaymentError: true,
        hideError: true,
        card: {},
        errorEvent: {},
        stripe: {},
        style: {
          base: {
            color: '#000',
            fontSize: '16px',
            fontFamily: 'Roboto, Open Sans, Segoe UI, sans-serif',
            fontSmoothing: 'antialiased',
            '::placeholder': {
              color: '#9ca3af',
            },
          },
          invalid: {
            color: '#e5424d',
            ':focus': {
              color: '#303238',
            },
          },
        },

        initialiseStripeForm(){
          this.stripe = Stripe('{{globals.STRIPE_PUBLISHED_KEY}}', {locale: "en-GB"});
          let elements = this.stripe.elements({locale: "en-GB"});
          this.card = elements.create('card', { style: this.style});
          this.card.mount('#card-element');

          this.card.on('change', (event) => {this.checkPaymentError(event)})

          this.stripeReadyHandler();
        },

        stripeReadyHandler() {
          let displayLoader = document.getElementById('stripeLoader');
          let paymentContent = document.getElementById('paymentContent');
          displayLoader.classList.add("hidden");
          paymentContent.classList.remove("hidden");
        },

        checkPaymentError(event) {
          let displayError = document.getElementById('card-element-errors');
          if (event.error) {
            this.paymentErrorEvent = event;
            displayError.textContent = event.error.message;
            this.validCardData = false;
            this.hidePaymentError = false;
            this.buttonLabel = 'SIGN UP'
            this.loading = false;
          } else {
            this.paymentErrorEvent = '';
            displayError.textContent = '';
            this.validCardData = true;
            this.hideError = true;
          }
        },

        checkCustomerInput(){
          nameCheck = Iodine.is(this.paymentData.name, ['required', 'string'])
          emailCheck = Iodine.is(this.paymentData.email, ['required', 'email'])
          this.hideCustomerError = (nameCheck == true && emailCheck == true)
        },
            
        createStripeCustomer() {
          this.checkCustomerInput();

          if(this.hideError && this.validCardData){
            this.buttonLabel = 'Processing...'
            this.loading = true;

            fetch( '{{globals.STRIPE_BACKEND_API}}/lottery/customer', {
              method: 'POST',
              mode: 'cors',
              credentials: 'omit',
              headers: {'Content-Type': 'application/json'},
              body: JSON.stringify(this.paymentData)
            })
            .then((res) => {
              return res.json()
            }).then((data) => {
              this.paymentData.customer = data
              this.message = 'Customer created sucessfully!'
              this.createStripePaymentMethod()
            })
            .catch((err) => {
              if('{{ globals.PRODUCTION }}' == true) {
                window.location.replace("/error")
              } else {
                console.log('Running in DEVELOPMENT so not redirecting...')
                this.loading = false;
                this.buttonLabel = 'Sign up'
              }
            })
          }
        },
        
        createStripePaymentMethod() {

          this.stripe.createPaymentMethod({
            type: 'card',
            card: this.card,
            billing_details: {
              name: this.paymentData.customer.name,
              email: this.paymentData.customer.email
            },
          })
          .then((result) => {
            if (result.error) {
              this.errorEvent = result
              this.displayError();
            } else {
              this.paymentData.paymentMethod = result.paymentMethod
              this.createStripeSubscription()  
            }
          });
        },

        createStripeSubscription() {
          return (
            fetch( '{{globals.STRIPE_BACKEND_API}}/lottery/subscription', {
              method: 'POST',
              mode: 'cors',
              credentials: 'omit',
              headers: {'Content-Type': 'application/json'},
              body: JSON.stringify({
                paymentMethodId: this.paymentData.paymentMethod.id,
                customerId: this.paymentData.customer.id,
                priceId: this.priceId,
              })
            })
            .then((response) => {
              return response.json();
            })
            // If the card is declined, display an error to the user.
            .then((result) => {
              if (result.error) {
                // The card had an error when trying to attach it to a customer.
                throw result;
              }
              return result;
            })
            // Normalize the result to contain the object returned by Stripe.
            // Add the additional details we need.
            .then((result) => {
              this.paymentData.subscription = result
              return {
                paymentMethodId: this.paymentData.paymentMethod.id,
                priceId: this.priceId,
                subscription: result,
              };
            })
            // Some payment methods require a customer to be on session
            // to complete the payment process. Check the status of the
            // payment intent to handle these actions.
            .then(this.handlePaymentThatRequiresCustomerAction)
            // If attaching this card to a Customer object succeeds,
            // but attempts to charge the customer fail, you
            // get a requires_payment_method error.
            .then(this.handleRequiresPaymentMethod)
            // No more actions required. Provision your service for the user.
            .then(this.onSubscriptionComplete)
            .catch((error) => {
              // An error has happened. Display the failure to the user here.
              // We utilize the HTML element we created.
              console.log(error)
              this.checkPaymentError(error);
            })
          )
        },

        onSubscriptionComplete(result) {
          // Payment was successful.
          console.log(result);
          if (result.subscription.status === 'active' || result.paymentIntent.status == 'succeeded') {
            // latest_invoice.payment_intent.status === 'requires_action'
            // Change your UI to show a success message to your customer.
            // Call your backend to grant access to your service based on
            // `result.subscription.items.data[0].price.product` the customer subscribed to.
            window.location.replace("/success")
          }
        },

        handlePaymentThatRequiresCustomerAction({
          subscription,
          invoice,
          priceId,
          paymentMethodId,
          isRetry,
        }) {
          console.log('handlePaymentThatRequiresCustomerAction')
          if (subscription && subscription.status === 'active') {
            // Subscription is active, no customer actions required.
            return { subscription, priceId, paymentMethodId };
          }

          // If it's a first payment attempt, the payment intent is on the subscription latest invoice.
          // If it's a retry, the payment intent will be on the invoice itself.
          let paymentIntent = invoice ? invoice.payment_intent : subscription.latest_invoice.payment_intent;

          if (
            paymentIntent.status === 'requires_action' ||
            (isRetry === true && paymentIntent.status === 'requires_payment_method')
          ) {
            return stripe
              .confirmCardPayment(paymentIntent.client_secret, {
                payment_method: paymentMethodId,
              })
              .then((result) => {
                if (result.error) {
                  // Start code flow to handle updating the payment details.
                  // Display error message in your UI.
                  // The card was declined (i.e. insufficient funds, card has expired, etc).
                  throw result;
                } else {
                  if (result.paymentIntent.status === 'succeeded') {
                    // Show a success message to your customer.

                    console.log('paymentIntent.status succeeded')
                    console.log(subscription)
                    return {
                      priceId: priceId,
                      subscription: subscription,
                      invoice: invoice,
                      paymentMethodId: paymentMethodId,
                      paymentIntent: result.paymentIntent,
                    };
                  }
                }
              })
              .catch((error) => {
                throw error
              });
          } else {
            // No customer action needed.
            return { subscription, priceId, paymentMethodId };
          }
        },

        handleRequiresPaymentMethod({
          subscription,
          paymentMethodId,
          priceId,
          paymentIntent,
        }) {
          console.log('handleRequiresPaymentMethod')
          console.log(subscription.latest_invoice.payment_intent.status)
          if (subscription.status === 'active') {
            // subscription is active, no customer actions required.
            console.log('subscription.status === active')
            return { subscription, priceId, paymentMethodId };
          } else if (
            subscription.latest_invoice.payment_intent.status ===
            'requires_payment_method'
          ) {
            // Using localStorage to manage the state of the retry here,
            // feel free to replace with what you prefer.
            // Store the latest invoice ID and status.
            localStorage.setItem('latestInvoiceId', subscription.latest_invoice.id);
            localStorage.setItem(
              'latestInvoicePaymentIntentStatus',
              subscription.latest_invoice.payment_intent.status
            );
            throw { error: { message: 'Your card was declined.' } };
          } else {
            return { subscription, priceId, paymentMethodId,paymentIntent };
          }
        }
      }
  };  
</script>

{% endblock %}